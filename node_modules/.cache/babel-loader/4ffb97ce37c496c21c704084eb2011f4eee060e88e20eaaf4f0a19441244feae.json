{"ast":null,"code":"var _jsxFileName = \"/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/components/CreatePostForm.js\",\n  _s = $RefreshSig$();\n// src/components/CreatePostForm.js\nimport React, { useState } from 'react';\nimport './CreatePostForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePostForm = ({\n  onPostCreated\n}) => {\n  _s();\n  const [postText, setPostText] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!postText) return;\n\n    // Replace with actual user ID as needed\n    const postBody = {\n      userId: 1,\n      // Example user ID, replace with actual user ID\n      postText: postText,\n      privacy: \"Public\"\n    };\n    try {\n      const response = await fetch(\"http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/withoutAttachment\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postBody)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(data);\n      onPostCreated(); // Callback to inform parent component\n      setPostText(''); // Reset the text field\n    } catch (error) {\n      console.error('Failed to create post:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: postText,\n      onChange: e => setPostText(e.target.value),\n      placeholder: \"What's on your mind?\",\n      rows: \"4\",\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatePostForm, \"ADYhJdCFXHuG5KBF14lU8EYzQWw=\");\n_c = CreatePostForm;\nexport default CreatePostForm;\nvar _c;\n$RefreshReg$(_c, \"CreatePostForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreatePostForm","onPostCreated","_s","postText","setPostText","handleSubmit","e","preventDefault","postBody","userId","privacy","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","onSubmit","children","value","onChange","target","placeholder","rows","style","width","fileName","_jsxFileName","lineNumber","columnNumber","type","marginTop","_c","$RefreshReg$"],"sources":["/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/components/CreatePostForm.js"],"sourcesContent":["// src/components/CreatePostForm.js\nimport React, { useState } from 'react';\nimport './CreatePostForm.css';\n\nconst CreatePostForm = ({ onPostCreated }) => {\n  const [postText, setPostText] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!postText) return;\n\n    // Replace with actual user ID as needed\n    const postBody = {\n      userId: 1, // Example user ID, replace with actual user ID\n      postText: postText,\n      privacy: \"Public\"\n    };\n\n    try {\n      const response = await fetch(\"http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/withoutAttachment\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(postBody),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(data)\n      onPostCreated(); // Callback to inform parent component\n      setPostText(''); // Reset the text field\n    } catch (error) {\n      console.error('Failed to create post:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <textarea\n        value={postText}\n        onChange={(e) => setPostText(e.target.value)}\n        placeholder=\"What's on your mind?\"\n        rows=\"4\"\n        style={{ width: '100%' }}\n      ></textarea>\n      <button type=\"submit\" style={{ marginTop: '10px' }}>Post</button>\n    </form>\n  );\n};\n\nexport default CreatePostForm;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMQ,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACJ,QAAQ,EAAE;;IAEf;IACA,MAAMK,QAAQ,GAAG;MACfC,MAAM,EAAE,CAAC;MAAE;MACXN,QAAQ,EAAEA,QAAQ;MAClBO,OAAO,EAAE;IACX,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wGAAwG,EAAE;QACrIC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,UAASR,QAAQ,CAACS,MAAO,EAAC,CAAC;MAC9C;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBpB,aAAa,CAAC,CAAC,CAAC,CAAC;MACjBG,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACE1B,OAAA;IAAM2B,QAAQ,EAAErB,YAAa;IAAAsB,QAAA,gBAC3B5B,OAAA;MACE6B,KAAK,EAAEzB,QAAS;MAChB0B,QAAQ,EAAGvB,CAAC,IAAKF,WAAW,CAACE,CAAC,CAACwB,MAAM,CAACF,KAAK,CAAE;MAC7CG,WAAW,EAAC,sBAAsB;MAClCC,IAAI,EAAC,GAAG;MACRC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC,eACZvC,OAAA;MAAQwC,IAAI,EAAC,QAAQ;MAACN,KAAK,EAAE;QAAEO,SAAS,EAAE;MAAO,CAAE;MAAAb,QAAA,EAAC;IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEX,CAAC;AAACpC,EAAA,CAhDIF,cAAc;AAAAyC,EAAA,GAAdzC,cAAc;AAkDpB,eAAeA,cAAc;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}