{"ast":null,"code":"var _jsxFileName = \"/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/components/MyPosts.js\",\n  _s = $RefreshSig$();\n// src/components/MyPosts.js\nimport React, { useState, useEffect } from 'react';\nimport CreatePostForm from './CreatePostForm';\nimport Post from '../Post';\nimport './MyPosts.css'; // Ensure this is correctly imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyPosts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const userId = 1; // Replace with actual user ID\n\n  useEffect(() => {\n    fetchPosts(currentPage);\n  }, [currentPage]);\n  const fetchPosts = async page => {\n    try {\n      const response = await fetch(`http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/user/${userId}?page=${page}&size=10&sort=createdAt,desc`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPosts(data.postDTOs);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.error('Failed to fetch posts:', error);\n    }\n  };\n  const handlePostCreated = () => {\n    fetchPosts(0);\n  };\n  const handlePostUpdated = () => {\n    fetchPosts(currentPage); // Re-fetch the posts on update\n  };\n\n  // Inside MyPosts.js\n\n  // Inside MyPosts.js\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CreatePostForm, {\n      onPostCreated: handlePostCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        postData: post,\n        onPostUpdated: handlePostUpdated\n      }, post.postId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(index),\n        className: currentPage === index ? 'active' : '',\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MyPosts, \"jBmyZQKBC6L+Y/glqq8UOO7QOQA=\");\n_c = MyPosts;\nexport default MyPosts;\nvar _c;\n$RefreshReg$(_c, \"MyPosts\");","map":{"version":3,"names":["React","useState","useEffect","CreatePostForm","Post","jsxDEV","_jsxDEV","MyPosts","_s","posts","setPosts","currentPage","setCurrentPage","totalPages","setTotalPages","userId","fetchPosts","page","response","fetch","ok","Error","status","data","json","postDTOs","error","console","handlePostCreated","handlePostUpdated","children","onPostCreated","fileName","_jsxFileName","lineNumber","columnNumber","map","post","postData","onPostUpdated","postId","className","Array","from","length","_","index","onClick","_c","$RefreshReg$"],"sources":["/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/components/MyPosts.js"],"sourcesContent":["// src/components/MyPosts.js\nimport React, { useState, useEffect } from 'react';\nimport CreatePostForm from './CreatePostForm';\nimport Post from '../Post';\nimport './MyPosts.css'; // Ensure this is correctly imported\n\nconst MyPosts = () => {\n  const [posts, setPosts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const userId = 1; // Replace with actual user ID\n\n  useEffect(() => {\n    fetchPosts(currentPage);\n  }, [currentPage]);\n\n  const fetchPosts = async (page) => {\n    try {\n      const response = await fetch(`http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/user/${userId}?page=${page}&size=10&sort=createdAt,desc`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setPosts(data.postDTOs);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.error('Failed to fetch posts:', error);\n    }\n  };\n\n  const handlePostCreated = () => {\n    fetchPosts(0);\n  };\n  const handlePostUpdated = () => {\n    fetchPosts(currentPage); // Re-fetch the posts on update\n  };\n\n// Inside MyPosts.js\n\n// Inside MyPosts.js\n\nreturn (\n    <div>\n      <CreatePostForm onPostCreated={handlePostCreated} />\n  \n      {/* Displaying each post */}\n      <div>\n        {posts.map(post => (\n          <Post \n            key={post.postId} \n            postData={post} \n            onPostUpdated={handlePostUpdated} \n          />\n        ))}\n      </div>\n  \n      {/* Pagination */}\n      <div className=\"pagination\">\n        {Array.from({ length: totalPages }, (_, index) => (\n          <button \n            key={index} \n            onClick={() => setCurrentPage(index)} \n            className={currentPage === index ? 'active' : ''}\n          >\n            {index + 1}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n  \n  \n};\n\nexport default MyPosts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}