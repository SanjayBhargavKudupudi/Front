{"ast":null,"code":"var _jsxFileName = \"/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport './Feed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Feed = ({\n  userId\n}) => {\n  _s();\n  const [postIds, setPostIds] = useState([]);\n  const [visiblePosts, setVisiblePosts] = useState([]);\n  const [visiblePostCount, setVisiblePostCount] = useState(2);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchFeed = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/feeds/user/1`);\n        const data = await response.json();\n        if (data.postIds) {\n          setPostIds(data.postIds);\n        }\n      } catch (error) {\n        console.error('Error fetching feed:', error);\n      }\n      setLoading(false);\n    };\n    fetchFeed();\n  }, [userId]);\n  useEffect(() => {\n    const fetchVisiblePosts = async () => {\n      if (postIds.length === 0 || visiblePostCount > postIds.length) {\n        return;\n      }\n      const idsToFetch = postIds.slice(0, visiblePostCount);\n      const idsQuery = idsToFetch.map(id => `postIds=${id}`).join('&');\n      const url = `http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/by-postIds?${idsQuery}&size=${idsToFetch.length}&sort=createdAt`;\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.postDTOs) {\n          setVisiblePosts(data.postDTOs);\n        }\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchVisiblePosts();\n  }, [postIds, visiblePostCount]);\n  const handleLoadMore = () => {\n    if (visiblePostCount + 2 <= postIds.length) {\n      setVisiblePostCount(prevCount => prevCount + 2);\n    } else {\n      // If there are fewer than 2 posts left, just show all remaining posts\n      setVisiblePostCount(postIds.length);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [visiblePosts.map((post, index) => /*#__PURE__*/_jsxDEV(Post, {\n        postData: post\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)), visiblePostCount < postIds.length && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoadMore,\n        className: \"load-more-btn\",\n        children: \"Load More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Feed, \"pFJoqWbxRydEQQ0Dg3W/sunZzPQ=\");\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","Feed","userId","_s","postIds","setPostIds","visiblePosts","setVisiblePosts","visiblePostCount","setVisiblePostCount","loading","setLoading","fetchFeed","response","fetch","data","json","error","console","fetchVisiblePosts","length","idsToFetch","slice","idsQuery","map","id","join","url","postDTOs","handleLoadMore","prevCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","post","index","postData","onClick","_c","$RefreshReg$"],"sources":["/Users/sanjaybhargav/Desktop/project/ExpressNest/Frontend/src/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport './Feed.css';\n\nconst Feed = ({ userId }) => {\n  const [postIds, setPostIds] = useState([]);\n  const [visiblePosts, setVisiblePosts] = useState([]);\n  const [visiblePostCount, setVisiblePostCount] = useState(2);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchFeed = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/feeds/user/1`);\n        const data = await response.json();\n        if (data.postIds) {\n          setPostIds(data.postIds);\n        }\n      } catch (error) {\n        console.error('Error fetching feed:', error);\n      }\n      setLoading(false);\n    };\n\n    fetchFeed();\n  }, [userId]);\n\n  useEffect(() => {\n    \n    const fetchVisiblePosts = async () => {\n      if (postIds.length === 0 || visiblePostCount > postIds.length) {\n        return;\n      }\n\n      const idsToFetch = postIds.slice(0, visiblePostCount);\n      const idsQuery = idsToFetch.map(id => `postIds=${id}`).join('&');\n      const url = `http://a83ab0f0e6671462c87d9c3980002854-1490594495.us-west-2.elb.amazonaws.com/posts/by-postIds?${idsQuery}&size=${idsToFetch.length}&sort=createdAt`;\n\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.postDTOs) {\n          setVisiblePosts(data.postDTOs);\n        }\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n\n    fetchVisiblePosts();\n  }, [postIds, visiblePostCount]);\n\n  const handleLoadMore = () => {\n    if (visiblePostCount + 2 <= postIds.length) {\n      setVisiblePostCount(prevCount => prevCount + 2);\n    } else {\n      // If there are fewer than 2 posts left, just show all remaining posts\n      setVisiblePostCount(postIds.length);\n    }\n  };\n\n  return (\n    <div className=\"feed\">\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          {visiblePosts.map((post, index) => (\n            <Post key={index} postData={post} />\n          ))}\n          {visiblePostCount < postIds.length && (\n            <button onClick={handleLoadMore} className=\"load-more-btn\">Load More</button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}